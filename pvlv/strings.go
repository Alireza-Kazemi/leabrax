// Code generated by "stringer -linecomment -output=strings.go -type=DALrnRule,DaRType,Valence,StriatalCompartment,ModNeuronVar,AcqExt"; DO NOT EDIT.

package pvlv

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DAHebbVS-0]
	_ = x[TraceNoThalVS-1]
	_ = x[DALrnRuleN-2]
}

const _DALrnRule_name = "DAHebbVSTraceNoThalVSDALrnRuleN"

var _DALrnRule_index = [...]uint8{0, 8, 21, 31}

func (i DALrnRule) String() string {
	if i < 0 || i >= DALrnRule(len(_DALrnRule_index)-1) {
		return "DALrnRule(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _DALrnRule_name[_DALrnRule_index[i]:_DALrnRule_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[D1R-0]
	_ = x[D2R-1]
	_ = x[DaRTypeN-2]
}

const _DaRType_name = "D1RD2RDaRTypeN"

var _DaRType_index = [...]uint8{0, 3, 6, 14}

func (i DaRType) String() string {
	if i < 0 || i >= DaRType(len(_DaRType_index)-1) {
		return "DaRType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _DaRType_name[_DaRType_index[i]:_DaRType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ValNone-0]
	_ = x[POS-1]
	_ = x[NEG-2]
	_ = x[ValenceN-3]
}

const _Valence_name = "NoValencePOSNEGValenceN"

var _Valence_index = [...]uint8{0, 9, 12, 15, 23}

func (i Valence) String() string {
	if i < 0 || i >= Valence(len(_Valence_index)-1) {
		return "Valence(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Valence_name[_Valence_index[i]:_Valence_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PATCH-0]
	_ = x[MATRIX-1]
	_ = x[NSComp-2]
}

const _StriatalCompartment_name = "PATCHMATRIXNSComp"

var _StriatalCompartment_index = [...]uint8{0, 5, 11, 17}

func (i StriatalCompartment) String() string {
	if i < 0 || i >= StriatalCompartment(len(_StriatalCompartment_index)-1) {
		return "StriatalCompartment(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _StriatalCompartment_name[_StriatalCompartment_index[i]:_StriatalCompartment_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DA-0]
	_ = x[ACh-1]
	_ = x[SE-2]
	_ = x[ModAct-3]
	_ = x[ModLevel-4]
	_ = x[ModNet-5]
	_ = x[ModLrn-6]
	_ = x[PVAct-7]
	_ = x[DALrn-8]
	_ = x[Cust1-9]
	_ = x[ModNeuronVarsN-10]
}

const _ModNeuronVar_name = "DAAChSEModActModLevelModNetModLrnPVActDALrnCust1ModNeuronVarsN"

var _ModNeuronVar_index = [...]uint8{0, 2, 5, 7, 13, 21, 27, 33, 38, 43, 48, 62}

func (i ModNeuronVar) String() string {
	if i < 0 || i >= ModNeuronVar(len(_ModNeuronVar_index)-1) {
		return "ModNeuronVar(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ModNeuronVar_name[_ModNeuronVar_index[i]:_ModNeuronVar_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Acq-0]
	_ = x[Ext-1]
	_ = x[NAcqExt-2]
}

const _AcqExt_name = "AcqExtNAcqExt"

var _AcqExt_index = [...]uint8{0, 3, 6, 13}

func (i AcqExt) String() string {
	if i < 0 || i >= AcqExt(len(_AcqExt_index)-1) {
		return "AcqExt(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AcqExt_name[_AcqExt_index[i]:_AcqExt_index[i+1]]
}
