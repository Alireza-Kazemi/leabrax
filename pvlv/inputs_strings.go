// Code generated by "stringer -linecomment -output=inputs_strings.go -type=Stim,PosUS,NegUS,Context,Tick"; DO NOT EDIT.

package pvlv

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[StmA-0]
	_ = x[StmB-1]
	_ = x[StmC-2]
	_ = x[StmD-3]
	_ = x[StmE-4]
	_ = x[StmF-5]
	_ = x[StmU-6]
	_ = x[StmV-7]
	_ = x[StmW-8]
	_ = x[StmX-9]
	_ = x[StmY-10]
	_ = x[StmZ-11]
	_ = x[StmNone-12]
}

const _Stim_name = "ABCDEFUVWXYZNoStim"

var _Stim_index = [...]uint8{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 18}

func (i Stim) String() string {
	if i < 0 || i >= Stim(len(_Stim_index)-1) {
		return "Stim(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Stim_name[_Stim_index[i]:_Stim_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Water-0]
	_ = x[Food-1]
	_ = x[Mate-2]
	_ = x[OtherPos-3]
	_ = x[PosUSNone-4]
}

const _PosUS_name = "WaterFoodMateOtherPosNoPosUS"

var _PosUS_index = [...]uint8{0, 5, 9, 13, 21, 28}

func (i PosUS) String() string {
	if i < 0 || i >= PosUS(len(_PosUS_index)-1) {
		return "PosUS(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PosUS_name[_PosUS_index[i]:_PosUS_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Shock-0]
	_ = x[Nausea-1]
	_ = x[Sharp-2]
	_ = x[OtherNeg-3]
	_ = x[NegUSNone-4]
}

const _NegUS_name = "ShockNauseaSharpOtherNegNoNegUS"

var _NegUS_index = [...]uint8{0, 5, 11, 16, 24, 31}

func (i NegUS) String() string {
	if i < 0 || i >= NegUS(len(_NegUS_index)-1) {
		return "NegUS(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NegUS_name[_NegUS_index[i]:_NegUS_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CtxA-0]
	_ = x[CtxA_B-1]
	_ = x[CtxA_C-2]
	_ = x[CtxB-3]
	_ = x[CtxB_B-4]
	_ = x[CtxB_C-5]
	_ = x[CtxC-6]
	_ = x[CtxC_B-7]
	_ = x[CtxC_C-8]
	_ = x[CtxD-9]
	_ = x[CtxD_B-10]
	_ = x[CtxD_C-11]
	_ = x[CtxE-12]
	_ = x[CtxE_B-13]
	_ = x[CtxE_C-14]
	_ = x[CtxF-15]
	_ = x[CtxF_B-16]
	_ = x[CtxF_C-17]
	_ = x[CtxU-18]
	_ = x[CtxU_B-19]
	_ = x[CtxU_C-20]
	_ = x[CtxV-21]
	_ = x[CtxV_B-22]
	_ = x[CtxV_C-23]
	_ = x[CtxW-24]
	_ = x[CtxW_B-25]
	_ = x[CtxW_C-26]
	_ = x[CtxX-27]
	_ = x[CtxX_B-28]
	_ = x[CtxX_C-29]
	_ = x[CtxY-30]
	_ = x[CtxY_B-31]
	_ = x[CtxY_C-32]
	_ = x[CtxZ-33]
	_ = x[CtxZ_B-34]
	_ = x[CtxZ_C-35]
	_ = x[CtxAX-36]
	_ = x[CtxAX_B-37]
	_ = x[CtxAX_C-38]
	_ = x[CtxAB-39]
	_ = x[CtxAB_B-40]
	_ = x[CtxAB_C-41]
	_ = x[CtxBY-42]
	_ = x[CtxBY_B-43]
	_ = x[CtxBY_C-44]
	_ = x[CtxCD-45]
	_ = x[CtxCD_B-46]
	_ = x[CtxCD_C-47]
	_ = x[CtxCX-48]
	_ = x[CtxCX_B-49]
	_ = x[CtxCX_C-50]
	_ = x[CtxCY-51]
	_ = x[CtxCY_B-52]
	_ = x[CtxCY_C-53]
	_ = x[CtxCZ-54]
	_ = x[CtxCZ_B-55]
	_ = x[CtxCZ_C-56]
	_ = x[CtxDU-57]
	_ = x[CtxNone-58]
}

const _Context_name = "AA_BA_CBB_BB_CCC_BC_CDD_BD_CEE_BE_CFF_BF_CUU_BU_CVV_BV_CWW_BW_CXX_BX_CYY_BY_CZZ_BZ_CAXAX_BAX_CABAB_BAB_CBYBY_BBY_CCDCD_BCD_CCXCX_BCX_CCYCY_BCY_CCZCZ_BCZ_CDUNoContext"

var _Context_index = [...]uint8{0, 1, 4, 7, 8, 11, 14, 15, 18, 21, 22, 25, 28, 29, 32, 35, 36, 39, 42, 43, 46, 49, 50, 53, 56, 57, 60, 63, 64, 67, 70, 71, 74, 77, 78, 81, 84, 86, 90, 94, 96, 100, 104, 106, 110, 114, 116, 120, 124, 126, 130, 134, 136, 140, 144, 146, 150, 154, 156, 165}

func (i Context) String() string {
	if i < 0 || i >= Context(len(_Context_index)-1) {
		return "Context(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Context_name[_Context_index[i]:_Context_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[T0-0]
	_ = x[T1-1]
	_ = x[T2-2]
	_ = x[T3-3]
	_ = x[T4-4]
	_ = x[T5-5]
	_ = x[T6-6]
	_ = x[T7-7]
	_ = x[T8-8]
	_ = x[T9-9]
	_ = x[TckNone-10]
}

const _Tick_name = "T0T1T2T3T4T5T6T7T8T9TckNone"

var _Tick_index = [...]uint8{0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 27}

func (i Tick) String() string {
	if i < 0 || i >= Tick(len(_Tick_index)-1) {
		return "Tick(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Tick_name[_Tick_index[i]:_Tick_index[i+1]]
}
